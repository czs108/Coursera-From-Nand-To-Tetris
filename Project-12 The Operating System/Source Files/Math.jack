// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array bitArray;

    /** Initializes the library. */
    function void init() {
        let bitArray = Array.new(16);
        let bitArray[0] = 1;
        let bitArray[1] = 2;
        let bitArray[2] = 4;
        let bitArray[3] = 8;
        let bitArray[4] = 16;
        let bitArray[5] = 32;
        let bitArray[6] = 64;
        let bitArray[7] = 128;
        let bitArray[8] = 256;
        let bitArray[9] = 512;
        let bitArray[10] = 1024;
        let bitArray[11] = 2048;
        let bitArray[12] = 4096;
        let bitArray[13] = 8192;
        let bitArray[14] = 16384;
        let bitArray[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, index, mask;

        let mask = 1;
        while (index < 16) {
            if (y & mask) {
                let sum = sum + x;
            }

            let x = x + x;
            let index = index + 1;
            let mask = mask + mask;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;

        if (y = 0) {
            do Sys.error(3);
            return 0;
        }

        let q = Math._divide(Math.abs(x), Math.abs(y));
        if ((x < 0) = (y < 0)) {
            return q;
        } else {
            return -q;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, temp, dblTemp;

        if (x < 0) {
            do Sys.error(4);
            return 0;
        }

        let y = 0;
        let i = 7;

        while (~(i < 0)) {
            let temp = y + bitArray[i];
            let dblTemp = temp * temp;

            if (~(dblTemp > x) & (dblTemp > 0)) {
                let y = temp;
            }

            let i = i - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    function int _divide(int x, int y) {
        var int q, result, sum;

        if (y > x) {
            return 0;
        }

        if (y < 16384) {
            let q = Math._divide(x, y + y);
        } else {
            let q = 0;
        }

        let sum = q + q;

        if ((x - (sum * y)) < y) {
            let result = sum;
        } else {
            let result = sum + 1;
        }

        return result;
    }
}
